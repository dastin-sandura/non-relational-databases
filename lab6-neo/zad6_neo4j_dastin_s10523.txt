Ćwiczenia 6 – Neo4J ciąg dalszy

Ćwiczenie należy oddać w formie pliku tekstowego zawierającego ponumerowane zapytania (zgodnie z numeracją zapytań w tekście ćwiczenia) oraz zestawu plików z wynikami w postaci graficznej i tekstowej (np. SVG i JSON – niestety dostępne opcje eksportu regularnie ulegają zmianie) o nazwach wynikX.svg i wynikX.json, gdzie X to numer zapytania (pliki graficzny i tekstowy należy wyeksportować z pomocą webowego interfejsu bazy, rozszerzenia zależą od wybranych formatów)

Część 1 – Wycieczki górskie

Zaimportuj dane uruchamiając skrypt task2.cypher. Napisz następujące zapytania:

1. Znajdź trasy którymi można dostać się z Darjeeling na Sandakphu, mające najmniejszą ilość etapów

MATCH shortPath = allShortestPaths((townD {name: 'Darjeeling'})-[x *]->(peakS {name: 'Sandakphu'})) RETURN shortPath

2. Znajdź mające najmniej etapów trasy którymi można dostać się z Darjeeling na Sandakphu i które mogą być wykorzystywane zimą

MATCH shortPathWinter=allShortestPaths((townD:town{name:'Darjeeling'})-[*]->(peakS:peak{name:'Sandakphu'})) where all (r in relationships(shortPathWinter) where r.winter='true') return nodes(shortPathWinter)

3. Uszereguj trasy którymi można dostać się z Darjeeling na Sandakphu według dystansu

MATCH pathSortedByDistance = (townD{name: "Darjeeling"})-[*..5]-(peakS {name: "Sandakphu"})
RETURN REDUCE(acc=0, r in relationships(pathSortedByDistance) | acc + r.distance) as pathDistance,pathSortedByDistance
ORDER BY pathDistance DESC;

Część 2 – Połączenia lotnicze

Zaimportuj dane uruchamiając skrypt task3.cypher. Napisz następujące zapytania:

4. Uszereguj porty lotnicze według ilości rozpoczynających się w nich lotów

MATCH (a:Airport)<-[:ORIGIN]-(f:Flight)
WITH a, count(f) as flightsCount
RETURN a, flightsCount
ORDER BY flightsCount DESC

5. Znajdź wszystkie porty lotnicze, do których da się dolecieć (bezpośrednio lub z przesiadkami) z Los Angeles (LAX) wydając mniej niż 3000
--stworzylem nowa relacje FLY_HIGH_TICKET

MATCH (startA:Airport)-[o:ORIGIN]-(f)-[d:DESTINATION]-(stopA:Airport)
WITH startA, f, stopA
MATCH (f)-[]-(t:Ticket)
MERGE (startA)-[new_rel:FLY_HIGH_TICKET{flightID:ID(f), airlineName: f.airline, ticketID:ID(t), class: t.class }]->(stopA)
RETURN startA, new_rel, stopA, f, t

--- query
MATCH path = ((d)-[:FLY_HIGH_TICKET*..3]->(o:Airport {name: "LAX"}))
WHERE ALL(x IN NODES(path) WHERE SINGLE(y IN NODES(path) WHERE y = x))
WITH path, relationships(path) AS rel_path
UNWIND rel_path As r MATCH (t) WHERE ID(t) = r.ticketID
WITH path, t
WITH path, sum(t.price) AS PriceSUM WHERE PriceSUM< 3000
RETURN PriceSUM,path

6. Uszereguj połączenia, którymi można dotrzeć z Los Angeles (LAX) do Dayton (DAY) według ceny biletów

7. Znajdź najtańsze połączenie z Los Angeles (LAX) do Dayton (DAY)
MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "TUS"})
WITH p, REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
  acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) as price
RETURN p, price
ORDER BY price asc
LIMIT 1

8. Znajdź najtańsze połączenie z Los Angeles (LAX) do Dayton (DAY) w klasie biznes
MATCH path = ((d:Airport {name:"TUS"})-[:FLY_HIGH_TICKET*..3]->(o:Airport {name: "LAX"}))
WHERE ALL(x IN NODES(path) WHERE SINGLE(y IN NODES(path) WHERE y = x))
WITH path, relationships(path) AS rel_path
UNWIND rel_path As r MATCH (t) WHERE ID(t) = r.ticketID 
WITH path, t WHERE t.class = "business" 
WITH path, sum(t.price) AS PriceSUM
RETURN  PriceSUM,path
ORDER BY PriceSUM ASC

9. Uszereguj linie lotnicze według ilości miast, pomiędzy którymi oferują połączenia (unikalnych miast biorących udział w relacjach :ORIGIN i :DESTINATION węzłów typu Flight obsługiwanych przez daną linię)

10. Znajdź najtańszą trasę łączącą 3 różne porty lotnicze